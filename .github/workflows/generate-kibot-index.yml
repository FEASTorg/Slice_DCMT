name: Generate KiBot index

on:
  workflow_call:
    inputs:
      kibot_run_id:
        description: "Run ID from KiBot CI to fetch artifacts"
        required: true
        type: string
    outputs:
      kibot_index_sha:
        description: "Commit SHA containing the latest KiBot index"
        value: ${{ jobs.generate-kibot-index.outputs.commit_sha }}

permissions:
  contents: write

concurrency:
  group: gen-kibot-index
  cancel-in-progress: true

jobs:
  generate-kibot-index:
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.record-sha.outputs.commit_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Sync to latest main
        run: |
          git fetch origin main
          git checkout -B main origin/main

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python deps
        run: pip install markdown2 pyyaml

      - name: Download KiBot artifact (for assets + index)
        uses: actions/download-artifact@v5
        with:
          name: kibot-site
          path: _kibot_art
          repository: ${{ github.repository }}
          run-id: ${{ inputs.kibot_run_id }}

      - name: Resolve artifact list & project from config (handles globs + case)
        id: resolve
        run: |
          python3 - <<'PY'
          import os, yaml, fnmatch
          ROOT = "_kibot_art"
          cfg = yaml.safe_load(open("docs/kibot/config.kibot.site.yml"))
          pats = cfg.get("artifacts", []) or []
          ibom_alts = ["BoM/*_iBoM.html", "BoM/*ibom.html", "*_iBoM.html", "*ibom.html"]
          if not any("ibom" in p.lower() for p in pats):
              pats += ibom_alts

          print("🔍 Artifact patterns to match:")
          for p in pats:
              print(f"  - {p}")

          files = []
          for r,_,fs in os.walk(ROOT):
              for f in fs:
                  rel = os.path.relpath(os.path.join(r,f), ROOT)
                  files.append(rel)

          print(f"📦 Found {len(files)} files in _kibot_art:")
          for f in files:
              print(f"  - {f}")

          def match(pat, rel):
              candidates = [
                  fnmatch.fnmatch(rel, pat),
                  fnmatch.fnmatch(rel.lower(), pat.lower()),
                  fnmatch.fnmatch(os.path.basename(rel), pat),
                  fnmatch.fnmatch(os.path.basename(rel).lower(), pat.lower()),
              ]
              if any(candidates):
                  print(f"✅ MATCH: '{rel}' ↔ '{pat}'")
              else:
                  print(f"❌ NO MATCH: '{rel}' ↔ '{pat}'")
              return any(candidates)

          found = []
          seen = set()
          for pat in pats:
              matches = [f for f in files if match(pat, f)]
              if matches:
                  matches.sort(key=lambda s:(len(s), s))
                  base = os.path.basename(matches[0])
                  if base.lower() not in seen:
                      seen.add(base.lower())
                      found.append(base)

          core = ["Schematic.pdf","PCB.pdf","kibot.log"]
          core_out = [x for x in core if x in found]
          rest = [x for x in found if x not in core]
          final = core_out + rest

          print("📝 Final resolved artifacts:")
          for a in final:
              print(f"  - {a}")

          with open(os.environ["GITHUB_OUTPUT"], "a") as g:
              g.write(f"list={','.join(final)}\n")
              g.write(f"project={cfg.get('project_name','')}\n")
          PY

      - name: Generate docs/kibot/index.md
        run: |
          python scripts/generate_kibot_index.py \
            --template docs/kibot/index_template.md \
            --out-md docs/kibot/index.md \
            --project "${{ steps.resolve.outputs.project }}" \
            --artifacts "${{ steps.resolve.outputs.list }}"

      - name: Read image list from config
        id: cfg
        run: |
          python3 - <<'PY'
          import os, yaml
          cfg = yaml.safe_load(open("docs/kibot/config.kibot.site.yml"))
          imgs = cfg.get("images", [])
          with open(os.environ["GITHUB_OUTPUT"], "a") as g:
              g.write("images<<EOF\n")
              g.write("\n".join(imgs))
              g.write("\nEOF\n")
          PY

      - name: Copy board images into repo (docs/assets/boards)
        run: |
          set -e
          mkdir -p docs/assets/boards
          printf '%s\n' "${{ steps.cfg.outputs.images }}" | while IFS= read -r f; do
            [ -z "$f" ] && continue
            # case-insensitive match for safety
            src=$(find _kibot_art -type f -iname "$f" | head -n1 || true)
            if [ -n "$src" ]; then
              cp "$src" "docs/assets/boards/$f"
              git add "docs/assets/boards/$f"
            else
              echo "WARN: $f not found in artifact"
            fi
          done

      - name: Commit & push (safe rebase)
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add docs/kibot/index.md || true
          if git diff --cached --quiet; then
            echo "✅ Nothing to commit."
            exit 0
          fi
          git commit -m "📄 KiBot index + board renders (auto)"
          git fetch origin main
          git pull --rebase origin main
          git push origin HEAD:main

      - name: Record SHA
        id: record-sha
        run: echo "commit_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
