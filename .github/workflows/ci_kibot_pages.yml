name: KiBot CI/CD + Deploy to GitHub Pages

permissions:
  contents: read
  actions: write
  pages: write
  id-token: write

on:
  push:
    paths:
      - "_config.yml"
      - "hardware/**"
      - ".github/workflows/**"
      - "docs/**"
  pull_request:
    paths:
      - "_config.yml"
      - "hardware/**"
      - ".github/workflows/**"
      - "docs/**"
  schedule:
    - cron: "43 5 * * 3"

env:
  CONFIG_FILE: docs/site_config.yml

jobs:
  ERC:
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad9_auto:latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Run ERC
        run: make -C hardware/ erc

  DRC:
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad9_auto:latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Run DRC
        run: make -C hardware/ drc

  Fab:
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad9_auto_full:latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install yq
        run: |
          apt-get update
          apt-get install -y yq

      - name: Load config
        id: config
        run: |
          OUT_DIR=$(yq -r '.output_dir' "$CONFIG_FILE")
          echo "out_dir=$OUT_DIR" >> $GITHUB_OUTPUT

      - name: Generate SCH files
        run: make -C hardware/ sch_fab

      - name: Generate PCB Fab Files
        run: make -C hardware/ pcb_fab

      - name: Upload KiBot Outputs
        uses: actions/upload-artifact@v4
        with:
          name: kibot-site
          path: hardware/${{ steps.config.outputs.out_dir }}

  pages:
    needs: Fab
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install yq and pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y yq pandoc

      - name: Load project config
        id: config
        run: |
          echo "Loading config from $CONFIG_FILE"
          echo "project_name=$(yq -r '.project_name' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "out_dir=$(yq -r '.output_dir' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "artifacts=$(yq -r '.artifacts[]' "$CONFIG_FILE" | paste -sd ',' -)" >> $GITHUB_OUTPUT

      - name: Download KiBot artifacts
        uses: actions/download-artifact@v5
        with:
          name: kibot-site
          path: _downloads

      - name: Copy selected KiBot outputs
        run: |
          mkdir -p docs
          IFS=',' read -ra FILES <<< "${{ steps.config.outputs.artifacts }}"
          for f in "${FILES[@]}"; do
            SRC=$(find _downloads -type f -name "$f" | head -n1 || true)
            if [ -n "$SRC" ]; then
              cp "$SRC" docs/
            else
              echo "Warning: $f not found"
            fi
          done

      - name: Generate index.md from template
        run: |
          export DATE=$(date '+%Y-%m-%d')
          export PROJECT_NAME="${{ steps.config.outputs.project_name }}"

          LINKS=""
          IFS=',' read -ra FILES <<< "${{ steps.config.outputs.artifacts }}"
          for f in "${FILES[@]}"; do
            LINKS+="- [$f](./$f)\n"
          done

          export LINKS

          envsubst < docs/index_template.md > docs/index.md

      - name: Convert index.md â†’ index.html
        run: |
          pandoc docs/index.md -f markdown -t html -s -o docs/index.html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: docs/

  deploy:
    needs: pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
